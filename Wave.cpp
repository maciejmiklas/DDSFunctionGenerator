#include "Wave.h"

#define SIN_TABLE_SIZE 118
static uint8_t SIN_TABLE[SIN_TABLE_SIZE] = { 0x80, 0x86, 0x8D, 0x93, 0x9A, 0xA0, 0xA7, 0xAD, 0xB3, 0xB9, 0xBF, 0xC5,
		0xCA, 0xD0, 0xD5, 0xDA, 0xDE, 0xE3, 0xE7, 0xEA, 0xEE, 0xF1, 0xF4, 0xF7, 0xF9, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
		0xFF, 0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xF9, 0xF7, 0xF4, 0xF1, 0xEE, 0xEA, 0xE7, 0xE3, 0xDE, 0xDA, 0xD5, 0xD0,
		0xCA, 0xC5, 0xBF, 0xB9, 0xB3, 0xAD, 0xA7, 0xA0, 0x9A, 0x93, 0x8D, 0x86, 0x80, 0x79, 0x72, 0x6C, 0x65, 0x5F,
		0x58, 0x52, 0x4C, 0x46, 0x40, 0x3A, 0x35, 0x2F, 0x2A, 0x25, 0x21, 0x1C, 0x18, 0x15, 0x11, 0xE, 0xB, 0x8, 0x6,
		0x4, 0x3, 0x2, 0x1, 0x0, 0x1, 0x2, 0x3, 0x4, 0x6, 0x8, 0xB, 0xE, 0x11, 0x15, 0x18, 0x1C, 0x21, 0x25, 0x2A, 0x2F,
		0x35, 0x3A, 0x40, 0x46, 0x4C, 0x52, 0x58, 0x5F, 0x65, 0x6C, 0x72, 0x77 };
// time for single sine cycle assuming delay in main loop is zero
#define SINE_PERIOD_NS ((uint32_t) WAVE_SIN_STEP_NS * SIN_TABLE_SIZE)

#define SIN_MAX_TABLE_SIZE 360
static uint8_t SIN_MAX_TABLE[SIN_MAX_TABLE_SIZE] = { 0x80, 0x82, 0x84, 0x86, 0x88, 0x8B, 0x8D, 0x8F, 0x91, 0x93, 0x96,
		0x98, 0x9A, 0x9C, 0x9E, 0xA0, 0xA3, 0xA5, 0xA7, 0xA9, 0xAB, 0xAD, 0xAF, 0xB1, 0xB3, 0xB5, 0xB7, 0xB9, 0xBB,
		0xBD, 0xBF, 0xC1, 0xC3, 0xC5, 0xC7, 0xC9, 0xCA, 0xCC, 0xCE, 0xD0, 0xD1, 0xD3, 0xD5, 0xD6, 0xD8, 0xDA, 0xDB,
		0xDD, 0xDE, 0xE0, 0xE1, 0xE3, 0xE4, 0xE5, 0xE7, 0xE8, 0xE9, 0xEA, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2,
		0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF7, 0xF8, 0xF9, 0xF9, 0xFA, 0xFB, 0xFB, 0xFC, 0xFC, 0xFD, 0xFD, 0xFD, 0xFE,
		0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFD, 0xFD,
		0xFD, 0xFC, 0xFC, 0xFB, 0xFB, 0xFA, 0xF9, 0xF9, 0xF8, 0xF7, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
		0xEF, 0xEE, 0xED, 0xEC, 0xEA, 0xE9, 0xE8, 0xE7, 0xE5, 0xE4, 0xE3, 0xE1, 0xE0, 0xDE, 0xDD, 0xDB, 0xDA, 0xD8,
		0xD6, 0xD5, 0xD3, 0xD1, 0xD0, 0xCE, 0xCC, 0xCA, 0xC9, 0xC7, 0xC5, 0xC3, 0xC1, 0xBF, 0xBD, 0xBB, 0xB9, 0xB7,
		0xB5, 0xB3, 0xB1, 0xAF, 0xAD, 0xAB, 0xA9, 0xA7, 0xA5, 0xA3, 0xA0, 0x9E, 0x9C, 0x9A, 0x98, 0x96, 0x93, 0x91,
		0x8F, 0x8D, 0x8B, 0x88, 0x86, 0x84, 0x82, 0x80, 0x7D, 0x7B, 0x79, 0x77, 0x74, 0x72, 0x70, 0x6E, 0x6C, 0x69,
		0x67, 0x65, 0x63, 0x61, 0x5F, 0x5C, 0x5A, 0x58, 0x56, 0x54, 0x52, 0x50, 0x4E, 0x4C, 0x4A, 0x48, 0x46, 0x44,
		0x42, 0x40, 0x3E, 0x3C, 0x3A, 0x38, 0x36, 0x35, 0x33, 0x31, 0x2F, 0x2E, 0x2C, 0x2A, 0x29, 0x27, 0x25, 0x24,
		0x22, 0x21, 0x1F, 0x1E, 0x1C, 0x1B, 0x1A, 0x18, 0x17, 0x16, 0x15, 0x13, 0x12, 0x11, 0x10, 0xF, 0xE, 0xD, 0xC,
		0xB, 0xA, 0x9, 0x8, 0x8, 0x7, 0x6, 0x6, 0x5, 0x4, 0x4, 0x3, 0x3, 0x2, 0x2, 0x2, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0,
		0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x2, 0x2, 0x2, 0x3, 0x3, 0x4, 0x4, 0x5, 0x6, 0x6, 0x7,
		0x8, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, 0x10, 0x11, 0x12, 0x13, 0x15, 0x16, 0x17, 0x18, 0x1A, 0x1B, 0x1C,
		0x1E, 0x1F, 0x21, 0x22, 0x24, 0x25, 0x27, 0x29, 0x2A, 0x2C, 0x2E, 0x2F, 0x31, 0x33, 0x35, 0x36, 0x38, 0x3A,
		0x3C, 0x3E, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5F,
		0x61, 0x63, 0x65, 0x67, 0x69, 0x6C, 0x6E, 0x70, 0x72, 0x74, 0x77, 0x79, 0x7B, 0x7D };
#define SINE_MAX_PERIOD_NS ((uint32_t) WAVE_SIN_STEP_NS * SIN_MAX_TABLE_SIZE)

#define SQUARE_TABLE_SIZE 12
static uint8_t SQUARE_TABLE[SQUARE_TABLE_SIZE] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
		0xFF };
#define SQUARE_PERIOD_NS ((uint32_t) WAVE_SQUARE_STEP_NS * SQUARE_TABLE_SIZE)

#define SAW_TABLE_SIZE 52
static uint8_t SAW_TABLE[SAW_TABLE_SIZE] = { 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90,
		95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200,
		205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255 };
#define SAW_PERIOD_NS ((uint32_t) WAVE_SAW_STEP_NS * SAW_TABLE_SIZE)

#define SEC_TO_NS 1000000000UL

uint8_t *wave_tablePointer;
uint8_t *wave_tableStart;
uint16_t wave_tableIdx;
uint16_t wave_tableSize;

static Frequency* frequency;
static uint32_t periodNs;

static void setSine();
static void setSineMax();
static void setSquare();
static void setSaw();

void wave_setup() {
	frequency = (Frequency*) malloc(sizeof(Frequency));
}

Frequency* wave_frequencyChange(uint32_t stepDelayNs) {
	frequency->fullPeriodNs = periodNs + stepDelayNs * wave_tableSize;
	frequency->freq = SEC_TO_NS / frequency->fullPeriodNs;
	return frequency;
}

uint32_t wave_calcMaxstepDelayNs() {
	return (MAX_CYCLE_TIME_NS - periodNs) / wave_tableSize;
}

Frequency* wave_changeWave(WaveDef wave) {
	switch (wave) {

	case SQUARE:
		setSquare();
		break;

	case SAW:
		setSaw();
		break;

	case SINE_MAX:
		setSineMax();
		break;

	case SINE:
	default:
		setSine();
		break;
	}

	wave_tableStart = wave_tablePointer;
	wave_tableIdx = 0;

	return wave_frequencyChange(0);
}

static void setSineMax() {
	wave_tableSize = SIN_MAX_TABLE_SIZE;
	wave_tablePointer = &SIN_MAX_TABLE[0];
	periodNs = SINE_MAX_PERIOD_NS;
}

static void setSine() {
	wave_tableSize = SIN_TABLE_SIZE;
	wave_tablePointer = &SIN_TABLE[0];
	periodNs = SINE_PERIOD_NS;
}

static void setSquare() {
	wave_tableSize = SQUARE_TABLE_SIZE;
	wave_tablePointer = &SQUARE_TABLE[0];
	periodNs = SQUARE_PERIOD_NS;
}

static void setSaw() {
	wave_tableSize = SAW_TABLE_SIZE;
	wave_tablePointer = &SAW_TABLE[0];
	periodNs = SAW_PERIOD_NS;
}

